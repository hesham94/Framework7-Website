extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = 'Inline Pages | Framework7 Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content
      h1 内联页面 (DOM 缓存)
      p 通过这种方式，你可以把所有的页面都放到 DOM 中，不需要在通过Ajax或者动态创建来加载他们。
      h2 启用内联页面
      p 默认情况下，内联页面功能是禁用的。如果你想启用，只需要给视图传入一个 <code>domCache: true</code> 参数即可：
      pre
        code
          | var mainView = myApp.addView('.view-main', {
          |     domCache: true //enable inline pages
          | });
      h2 内联新页面结构
      p 就像我们上面说的，当应用加载的时候你的所有页面都已经在index文件的DOM中了。下面是index文件的结构：
      pre
        code
          | &lt;html&gt;
          |   &lt;head&gt;...&lt;/head&gt;
          |   &lt;body&gt;
          |     ...
          |     &lt;!-- Views --&gt;
          |     &lt;div class="views"&gt;
          |       &lt;!-- View --&gt;
          |       &lt;div class="view view-main"&gt;
          |         &lt;!-- Pages --&gt;
          |         &lt;div class="pages"&gt;
          |           &lt;!-- Home page --&gt;
          |           &lt;div class="page" data-page="index"&gt;
          |             &lt;div class="page-content"&gt;
          |               &lt;p&gt;Home page&lt;/p&gt;
          |             &lt;/div&gt;
          |           &lt;/div&gt;
          | 
          |           &lt;!-- About page --&gt;
          |           &lt;div class="page cached" data-page="about"&gt;
          |             &lt;div class="page-content"&gt;
          |               &lt;p&gt;About page&lt;/p&gt;
          |             &lt;/div&gt;
          |           &lt;/div&gt;
          | 
          |           &lt;!-- Services page --&gt;
          |           &lt;div class="page cached" data-page="services"&gt;
          |             &lt;div class="page-content"&gt;
          |               &lt;p&gt;Services page&lt;/p&gt;
          |             &lt;/div&gt;
          |           &lt;/div&gt;
          |         &lt;/div&gt;
          |       &lt;/div&gt;
          |     &lt;/div&gt;
          |     ...
          |   &lt;/body&gt;
          | &lt;/html&gt;
      p 就像你看到的那样，它几乎和 <a href="app-layout.html">普通的App布局</a> 一样，唯一不同的是，我们已经有了所有的页面，并且那些附加的页面都有一个额外的 cached 类。
      .important-note
        p 所有的附加页面(非当前显示的页面)都应该有一个额外的 <code>cached</code> 类
      h2 有动态导航栏的内敛页面的结构
      p.ios-only Structure with Dynamic Navbar is supported only in iOS Theme
      p 在 <a href="navbar-toolbar-layouts.html">导航栏和工具栏布局</a> 中说到，动态导航栏需要穿透布局。但是在这里，导航栏不是在页面中的。
      p 所以我们需要增加一些 navbar inners:
      pre
        code
          | &lt;html&gt;
          |   &lt;head&gt;...&lt;/head&gt;
          |   &lt;body&gt;
          |     ...
          |     &lt;!-- Views --&gt;
          |     &lt;div class="views"&gt;
          |       &lt;!-- View --&gt;
          |       &lt;div class="view view-main"&gt;
          | 
          |         &lt;!-- Navbar --&gt;
          |         &lt;div class="navbar"&gt;
          |           &lt;!-- Home page navbar --&gt;
          |           &lt;div class="navbar-inner" data-page="index"&gt;
          |             &lt;div class="center"&gt;Home&lt;/div&gt;
          |           &lt;/div&gt;
          | 
          |           &lt;!-- About page navbar --&gt;
          |           &lt;div class="navbar-inner cached" data-page="about"&gt;
          |             &lt;div class="center"&gt;About&lt;/div&gt;
          |           &lt;/div&gt;
          | 
          |           &lt;!-- Services page navbar --&gt;
          |           &lt;div class="navbar-inner cached" data-page="services"&gt;
          |             &lt;div class="center"&gt;Services&lt;/div&gt;
          |           &lt;/div&gt;
          |         &lt;/div&gt;
          | 
          |         &lt;!-- Pages --&gt;
          |         &lt;div class="pages navbar-through"&gt;
          |           &lt;!-- Home page --&gt;
          |           &lt;div class="page" data-page="index"&gt;
          |             &lt;div class="page-content"&gt;
          |               &lt;p&gt;Home page&lt;/p&gt;
          |             &lt;/div&gt;
          |           &lt;/div&gt;
          | 
          |           &lt;!-- About page --&gt;
          |           &lt;div class="page cached" data-page="about"&gt;
          |             &lt;div class="page-content"&gt;
          |               &lt;p&gt;About page&lt;/p&gt;
          |             &lt;/div&gt;
          |           &lt;/div&gt;
          | 
          |           &lt;!-- Services page --&gt;
          |           &lt;div class="page cached" data-page="services"&gt;
          |             &lt;div class="page-content"&gt;
          |               &lt;p&gt;Services page&lt;/p&gt;
          |             &lt;/div&gt;
          |           &lt;/div&gt;
          |         &lt;/div&gt;
          |       &lt;/div&gt;
          |     &lt;/div&gt;
          |     ...
          |   &lt;/body&gt;
          | &lt;/html&gt;          
      .important-note
        ul
          li
            p 所有的附加（不是当前显示的） navbar-inner 都应该有一个 <code>cached</code> 类
          li
            p 当时在内联页面中使用动态导航栏时，每一个相关的 "navbar-inner" 都应该有一个对应的 <code>data-page</code> 属性。
      h2 内联页面的URL
      p 现在，当我们写好了页面结构和内联页面之后，我们需要创建链接来指向这些内联页面
      p 内联页面的URL遵循这个规则： <code>&#35;{{pageName}}</code>，其中 {{pageName}} 是需要加载的页面的名称 (data-name 属性）
      p 假设我们想加载 "about" 页面，我们需要这样写链接：
      pre
        code
          | &lt;a href="#about"&gt;Go to About page&lt;/a&gt;

      h2 返回上一页
      p 这个和 <a href="pages-ajax.html">Ajax Pages</a> 完全一样，唯一不同的是页面的URL。我们所要做的仅仅是在链接上增加一个 back 类:
      pre
        code
          | &lt;div class="page" data-page="about"&gt;
          |   &lt;!-- Just add additional "back" class to link --&gt;
          |   &lt;a href="#index" class="back"&gt; Go back to home page &lt;/a&gt;
          | &lt;/div&gt;
      h2 使用JS加载内联页面
      p 除了使用 <code>&lt;a&gt;</code> 标签，还可以通过JS加载内联页面。这种情况下，我们使用 <code>router.load()</code> 方法  <a href="router-api.html#view-navigation-methods">View Navigation Methods</a>
      pre
        code
          | // Initialize App  
          | var myApp = new Framework7();
          |         
          | // Initialize View          
          | var mainView = myApp.addView('.view-main')          
          |         
          | // Load about page:
          | mainView.router.load({pageName: 'about'});
      p 注意，只有视图初始化之后才行哦。

      h2 使用JS返回上一页
      p 通过JS调用 <code>.router.back()</code>(<a href="router-api.html#view-navigation-methods">View Navigation Methods</a>) 方法就可以返回上一页，和你点 "back" 链接是一样的效果
      pre
        code
          | // Initialize App  
          | var myApp = new Framework7();
          |         
          | // Initialize View          
          | var mainView = myApp.addView('.view-main')          
          |         
          | // Go back on main View
          | mainView.router.back();
      p 当然，你也必须先初始化view

      h2 总结
      p 就像你看到的这样，页面间的链接和跳转是很简单的。你只需要记住这些：
      ul
        li
          p 你可以使用 <code>&lt;a&gt;</code> 标签，只需要在 href 属性上写入需要加载的页面的 &#35;{{pageName}}
        li
          p 可以直接给一个链接加上 "back" 类 (<b>&lt;a href="#index" class="back"&gt;</b>)，它就会变成一个返回上一个链接
