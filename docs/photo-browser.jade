extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = '图片浏览器 | Framework7 文档';

block content
  .docs-demo-device
    iframe(width="320", height="548", frameborder="0", scrolling="on")
    .fade-overlay
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content.with-device
      .full-width
        h1 图片浏览器（Photo Browser）
        p 图片浏览器是一个像iOS图片浏览器一样用来展示图片的组件。图片可以被缩放或者平移 (可选)。
        p 图片浏览器使用 <a href="swiper.html">幻灯片</a>组件来展现图片。

        h2 创建一个图片浏览器实例
        p 图片浏览器只需通过javaScript就可以被创建和初始化。我们需要使用App封装好的方法：
        .method-wrap
          p
            span.method myApp.photoBrowser(<span>parameters</span>) 
            span -  带参初始化图片浏览器
          ul.method-parameters
            li
              span.parameter parameters
              |  - <span class="parameter-type">object</span> - 图片浏览器参数对象（必选）。
            
            li.method-returns 该方法返回图片浏览器实例引用
        p 示例：
        pre
          code
            | var myPhotoBrowser = app.photoBrowser({
            |     zoom: 400,
            |     photos: ['path/to/image1.jpg', 'path/to/image2.jpg']
            | });   
            | myPhotoBrowser.open(); // 打开图片浏览器
        h2 图片浏览器参数
        p 所有可用参数列表：
        table.params-table
          thead
            tr
              th 参数（Parameter）
              th 类型（Type）
              th 默认（Default）
              th 描述（Description）
          tbody
            tr
              td photos
              td array
              td []
              td 照片的url数组或者是包含“url”（或者“html”）和“caption”属性的对象数组.
            tr
              td initialSlide
              td number
              td 0
              td 初始化时展示的图片序号
            tr
              td spaceBetween
              td number
              td 20
              td 图片展现间隔距离（px）
            tr
              td speed
              td number
              td 300
              td 切换图片的时间间隔（ms）
            tr
              td zoom
              td boolean
              td true
              td 是否启用图片的缩放和平移功能
            tr
              td maxZoom
              td number
              td 3
              td 最大缩放倍数
            tr
              td minZoom
              td number
              td 1
              td 最小缩放倍数
            tr
              td exposition
              td boolean
              td true
              td 图片点击时是否启用浏览模式
            tr
              td expositionHideCaptions
              td boolean
              td false
              td 是否在浏览模式中隐藏标题
            tr
              td swipeToClose
              td boolean
              td true
              td 是否可以通过上下滑动的方式来关闭图片浏览器
            tr
              td view
              td <a href="views.html">View instance</a>
              td undefined
              td 如果想用page形式打开，则需要指定一个初始化的View实例，如果不指定，将默认在Main View中打开
            tr
              td type
              td string
              td 'standalone'
              td 定义图片浏览器的打开方式，可选参数有'standalone'（打开时将有一个自定义过渡效果的遮罩层），'popup'（打开一个<a href="popup.html">popup</a>），’page‘（将被放置于View中，作为一个新页面加载）
            tr
              td loop
              td boolean
              td false
              td Set to "true" to enable continuous loop mode
            tr
              td theme
              td string
              td 'light'
              td 图片浏览器颜色主题，可以为'light'或者'dark'
            tr
              td captionsTheme
              td string
              td 
              td 标题的颜色主题，可以为light'或者'dark'。默认与"theme"相同
            tr
              td navbar
              td boolean
              td true
              td 是否生成图片浏览器的导航栏
            tr
              td toolbar
              td boolean
              td true
              td 是否生成图片浏览器的工具栏
            tr
              td backLinkText
              td string
              td 'Close'
              td 图片浏览器的导航栏中返回链接的文本
            tr
              td ofText
              td string
              td 'of'
              td 图片的序号和总数之间的分割词，例如："3 of 5"
            tr
              th(colspan="4") 懒加载
            tr
              td lazyLoading
              td boolean
              td false
              td 设置为true启用懒加载
            tr
              td lazyLoadingInPrevNext
              td boolean
              td false
              td 设置为 true，则会懒加载最近的图片（上一个和下一个）
            tr
              td lazyLoadingOnTransitionStart
              td boolean
              td false
              td 默认情况下，图片浏览器在动画结束后开始懒加载。如果你希望在动画开始的时候就开始懒加载，你可以设置这个参数。
            tr
              th(colspan="4") 模板
            tr
              td template
              td string
              td *见下面
              td 图片浏览器的HTML模版
            tr
              td navbarTemplate
              td string
              td *见下面
              td 导航栏的HTML模版
            tr
              td toolbarTemplate
              td string
              td *见下面
              td 工具栏的HTML模版
            tr
              td photoTemplate
              td string
              td *见下面
              td 单独图片元素的HTML模版
            tr
              td photoLazyTemplate
              td string
              td *Look below
              td Single lazy loading photo element HTML template
            tr
              td objectTemplate
              td string
              td *见下面
              td 单独对象元素的HTML模版
            tr
              td captionsTemplate
              td string
              td *见下面
              td 标题容器的HTML模版
            tr
              td captionTemplate
              td string
              td *见下面
              td 单独标题元素的HTML模版
            tr
              th(colspan="4") 回调函数
            tr
              td onOpen(photobrowser)
              td function
              td 
              td 回调函数，当图片浏览器被打开的时候执行
            tr
              td onClose(photobrowser)
              td function
              td 
              td 回调函数，当图片浏览器被关闭的时候执行
            tr
              td onSwipeToClose(photobrowser)
              td function
              td 
              td 回调函数，当图片浏览器通过上下滑动的形式关闭时执行
            tr
              th(colspan="4") Swiper Callbacks
            tr
              td onSlideChangeStart(swiper)
              td function
              td 
              td 回调函数，当图片浏览器向前或者向后切换图片开始的时候执行，接受幻灯片的实例作为参数
            tr
              td onSlideChangeEnd(swiper)
              td function
              td 
            tr
              td onTransitionStart(swiper)
              td function
              td 
              td Callback function, will be executed in the beginning of transition. Receives swiper instance as an argument.
            tr
              td onTransitionEnd(swiper)
              td function
              td 
              td Callback function, will be executed after transition. Receives slider instance as an argument.
            tr
              td onClick(swiper, event)
              td function
              td 
              td 回调函数，当图片浏览器被点击/触碰的时候延迟300ms执行，接受幻灯片的实例和touchend事件两个对象作为参数
            tr
              td onTap(swiper, event)
              td function
              td 
              td 回调函数，当图片浏览器被点击/触碰的时候执行，接受幻灯片的实例和touchend事件两个对象作为参数
            tr
              td onDoubleTap(swiper, event)
              td function
              td 
              td 回调函数，当图片浏览器被连续两次触碰的时候执行，接受幻灯片的实例和touchend事件两个对象作为参数
            tr
              td onLazyImageLoad(swiper, slide, image)
              td function
              td 
              td Callback function, will be executed when Photo Browser begins to load lazy loading photo
            tr
              td onLazyImageReady(swiper, slide, image)
              td function
              td 
              td Callback function, will be executed after lazy loading photo will be loaded
            
        h2 图片浏览器方法及属性
        p 当我们初始化图片浏览器之后，我们将会得到它的实例引用（比如<code>myPhotoBrowser</code>）， 并且包括很多有用的方法和属性：
        table.methods-table
          tbody
            tr
              th(colspan="2") 属性
            tr
              td myPhotoBrowser.swiper
              td 包含一个<a href="slider.html">Swiper</a> 实例，这个实例上有所有可用的Swiper <a href="slider.html#swiper-methods-properties">方法和属性</a>
            tr
              td myPhotoBrowser.container
              td <a href="dom.html">Dom7</a>形式的图片浏览器HTML容器
            tr
              td myPhotoBrowser.exposed
              td 图片浏览器是否处于浏览模式
            tr
              td myPhotoBrowser.activeSlideIndex
              td 当前可见的幻灯片的序号
            tr
              td myPhotoBrowser.params
              td 传入的初始化参数对象
            tr
              th(colspan="2") 方法
            tr
              td myPhotoBrowser.open(<span>index</span>);
              td 根据“index”参数的值打开图片浏览器，如果“index”参数没有被指定，则打开最后关闭的图片
            tr
              td myPhotoBrowser.close();
              td 关闭图片浏览器
            tr
              td myPhotoBrowser.toggleZoom();
              td 切换当前幻灯片的缩放形式
            tr
              td myPhotoBrowser.toggleExposition();
              td 切换浏览模式
            tr
              td myPhotoBrowser.enableExposition();
              td 启用浏览模式
            tr
              td myPhotoBrowser.disableExposition();
              td 禁用浏览模式
        h2 图片数组
        p 当我们初始化图片浏览器的时候，需要传递一个数组，包括图片或者是视频的相关信息，让我们看看这个数组的各种变形：
        pre
          code
            | //如果我们只需要图片的话，可以传递图片地址数组
            | var photos = [
            |     'image1.jpg',
            |     'image2.jpg',
            |     'image3.jpg',
            |     'image4.jpg',
            | ];
            | 
            | //如如果我们需要标题的话，则需要包装成一个含有caption属性的对象:
            | var photos = [
            |     {
            |         url: 'image1.jpg',
            |         caption: 'Caption 1'
            |     },
            |     {
            |         url: 'image2.jpg',
            |         caption: 'Caption 1'
            |     },
            |     // 这个是没有标题的
            |     {
            |         url: 'image3.jpg',
            |     },
            |     // 也可以不使用对象形式
            |     'image4.jpg'
            | ];
            | 
            | //如果我们需要使用视频，则把包含视频元素的HTML片段或者是iframe放到“html”属性里：
            | var photos = [
            |     {
            |         url: 'image1.jpg',
            |         caption: 'Caption 1'
            |     },
            |     // 带标题的视频
            |     {
            |         html: '&lt;video src="video1.mp4"&gt;&lt;/video&gt;',
            |         caption: 'Video Caption'
            |     },
            |     // 这个是没有标题的iframe
            |     {
            |         html: '&lt;iframe src="..."&gt;&lt;/iframe&gt;',
            |     },
            |     // 这个是没有标题的视频标签
            |     '&lt;video src="video2.mp4"&gt;&lt;/video&gt;'
            | ];        
      h2(data-device-preview="../docs-demos/photo-browser.html") 示例

      pre
        code
          | &lt;div class="page-content"&gt;
          |   &lt;div class="content-block-title"&gt;Light Theme&lt;/div&gt;
          |   &lt;div class="content-block row"&gt;
          |     &lt;div class="col-33"&gt;&lt;a href="#" class="button pb-standalone"&gt;Standalone&lt;/a&gt;&lt;/div&gt;
          |     &lt;div class="col-33"&gt;&lt;a href="#" class="button pb-popup"&gt;Popup&lt;/a&gt;&lt;/div&gt;
          |     &lt;div class="col-33"&gt;&lt;a href="#" class="button pb-page"&gt;Page&lt;/a&gt;&lt;/div&gt;
          |   &lt;/div&gt;
          |   &lt;div class="content-block-title"&gt;Dark Theme&lt;/div&gt;
          |   &lt;div class="content-block row"&gt;
          |     &lt;div class="col-50"&gt;&lt;a href="#" class="button pb-standalone-dark"&gt;Standalone&lt;/a&gt;&lt;/div&gt;
          |     &lt;div class="col-50"&gt;&lt;a href="#" class="button pb-popup-dark"&gt;Popup&lt;/a&gt;&lt;/div&gt;
          |   &lt;/div&gt;
          | &lt;/div&gt; 
      pre
        code           
          | var myApp = new Framework7(); 
          | 
          | var $$ = Dom7;
          | 
          | var mainView = myApp.addView('.view-main', {
          |   dynamicNavbar: true
          | });
          | 
          | /*=== 默认为 standalone ===*/
          | var myPhotoBrowserStandalone = myApp.photoBrowser({
          |     photos : [
          |         'http://lorempixel.com/1024/1024/sports/1/',
          |         'http://lorempixel.com/1024/1024/sports/2/',
          |         'http://lorempixel.com/1024/1024/sports/3/',
          |     ]
          | });
          | //点击时打开图片浏览器
          | $$('.pb-standalone').on('click', function () {
          |     myPhotoBrowserStandalone.open();
          | });
          | 
          | /*=== Popup ===*/
          | var myPhotoBrowserPopup = myApp.photoBrowser({
          |     photos : [
          |         'http://lorempixel.com/1024/1024/sports/1/',
          |         'http://lorempixel.com/1024/1024/sports/2/',
          |         'http://lorempixel.com/1024/1024/sports/3/',
          |     ],
          |     type: 'popup'
          | });
          | $$('.pb-popup').on('click', function () {
          |     myPhotoBrowserPopup.open();
          | });
          | 
          | /*=== 作为Page ===*/
          | var myPhotoBrowserPage = myApp.photoBrowser({
          |     photos : [
          |         'http://lorempixel.com/1024/1024/sports/1/',
          |         'http://lorempixel.com/1024/1024/sports/2/',
          |         'http://lorempixel.com/1024/1024/sports/3/',
          |     ],
          |     type: 'page',
          |     backLinkText: 'Back'
          | });
          | $$('.pb-page').on('click', function () {
          |     myPhotoBrowserPage.open();
          | });
          | 
          | /*=== Standalone Dark ===*/
          | var myPhotoBrowserDark = myApp.photoBrowser({
          |     photos : [
          |         'http://lorempixel.com/1024/1024/sports/1/',
          |         'http://lorempixel.com/1024/1024/sports/2/',
          |         'http://lorempixel.com/1024/1024/sports/3/',
          |     ],
          |     theme: 'dark'
          | });
          | $$('.pb-standalone-dark').on('click', function () {
          |     myPhotoBrowserDark.open();
          | });
          | 
          | /*=== Popup Dark ===*/
          | var myPhotoBrowserPopupDark = myApp.photoBrowser({
          |     photos : [
          |         'http://lorempixel.com/1024/1024/sports/1/',
          |         'http://lorempixel.com/1024/1024/sports/2/',
          |         'http://lorempixel.com/1024/1024/sports/3/',
          |     ],
          |     theme: 'dark',
          |     type: 'popup'
          | });
          | $$('.pb-popup-dark').on('click', function () {
          |     myPhotoBrowserPopupDark.open();
          | }); 
          | 
          | /*=== 有标题 ===*/
          | var myPhotoBrowserPopupDark = myApp.photoBrowser({
          |     photos : [
          |         {
          |             url: 'http://lorempixel.com/1024/1024/sports/1/',
          |             caption: 'Caption 1 Text'
          |         },
          |         {
          |             url: 'http://lorempixel.com/1024/1024/sports/2/',
          |             caption: 'Second Caption Text'
          |         },
          |         // 这个没有标题
          |         {
          |             url: 'http://lorempixel.com/1024/1024/sports/3/',
          |         },
          |     ],
          |     theme: 'dark',
          |     type: 'standalone'
          | });
          | $$('.pb-standalone-captions').on('click', function () {
          |     myPhotoBrowserPopupDark.open();
          | });
          | 
          | /*=== 有视频 ===*/
          | var myPhotoBrowserPopupDark = myApp.photoBrowser({
          |     photos : [
          |         {
          |             html: '&lt;iframe src="//www.youtube.com/embed/lmc21V-zBq0?list=PLpj0FBQgLGEr3mtZ5BTwtmSwF1dkPrPRM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;',
          |             caption: 'Woodkid - Run Boy Run (Official HD Video)'
          |         },
          |         {
          |             url: 'http://lorempixel.com/1024/1024/sports/2/',
          |             caption: 'Second Caption Text'
          |         },
          |         {
          |             url: 'http://lorempixel.com/1024/1024/sports/3/',
          |         },
          |     ],
          |     theme: 'dark',
          |     type: 'standalone'
          | });
          | $$('.pb-standalone-video').on('click', function () {
          |     myPhotoBrowserPopupDark.open();
          | });
      .full-width.stop-scroll-device
        h2 图片浏览器模版 
        p 让我们来看看图片浏览器可用于初始化时的模版
        h3 图片浏览器主模版
        p 您可以通过<code>template</code>参数传递定制的HTML模板。这是一个示例：
        pre
          code
            | &lt;div class="photo-browser photo-browser-dark"&gt;
            |     &lt;div class="view navbar-fixed toolbar-fixed"&gt;
            |         {{navbar}}
            |         &lt;div data-page="photo-browser-slides" class="page no-toolbar toolbar-fixed navbar-fixed"&gt;
            |             &lt;div class="photo-browser-swiper-container swiper-container"&gt;
            |                 &lt;div class="photo-browser-swiper-wrapper swiper-wrapper"&gt;
            |                     {{photos}}
            |                 &lt;/div&gt;
            |             &lt;/div&gt;
            |             {{toolbar}}
            |         &lt;/div&gt;
            |     &lt;/div&gt;
            | &lt;/div&gt; 
        p 其中：
        ul
          li
            p <code>{{navbar}}</code> - 会被导航栏模版所替换
          li
            p <code>{{toolbar}}</code> - 会被工具栏模板替换
          li
            p <code>{{photos}}</code> - 会被单个图片模板替换
        h3 导航栏模版
        p 这是导航栏的示例模版，你可以通过<code>navbarTemplate</code>参数传递：
        pre
          code
            | &lt;div class="navbar"&gt;
            |     &lt;div class="navbar-inner"&gt;
            |         &lt;div class="left sliding"&gt;
            |             &lt;a href="#" class="link close-popup photo-browser-close-link"&gt;
            |                 &lt;i class="icon icon-back"&gt;&lt;/i&gt;
            |                 &lt;span&gt;Close&lt;/span&gt;
            |             &lt;/a&gt;
            |         &lt;/div&gt;
            |         &lt;div class="center sliding"&gt;
            |             &lt;span class="photo-browser-current"&gt;&lt;/span&gt; &lt;span class="photo-browser-of"&gt;of&lt;/span&gt; &lt;span class="photo-browser-total"&gt;&lt;/span&gt;
            |         &lt;/div&gt;
            |         &lt;div class="right"&gt;&lt;/div&gt;
            |     &lt;/div&gt;
            | &lt;/div&gt;
        p 其中：        
        ul
          li    
            p <code>&lt;a class="photo-browser-close-link"&gt;</code> - 点击时将关闭图片浏览器，并且解绑所有的监听器
          li
            p <code>&lt;span class="photo-browser-current"&gt;</code> - 图片浏览器将在该元素中插入当前的活动图片序号
          li
            p <code>&lt;span class="photo-browser-total"&gt;</code> - 图片浏览器将在该元素中插入幻灯片总数
        h3 工具栏模版
        p 这是工具栏的示例模版，你可以通过<code>toolbarTemplate</code>参数传递：
        pre
          code
            | &lt;div class="toolbar tabbar"&gt;
            |     &lt;div class="toolbar-inner"&gt;
            |         &lt;a href="#" class="link photo-browser-prev"&gt;&lt;i class="icon icon-prev"&gt;&lt;/i&gt;&lt;/a&gt;
            |         &lt;a href="#" class="link photo-browser-next"&gt;&lt;i class="icon icon-next"&gt;&lt;/i&gt;&lt;/a&gt;
            |     &lt;/div&gt;
            | &lt;/div&gt;
        p 它其实就是一个标签栏，其中：
        ul
          li
            p <code>&lt;a class="photo-browser-next"&gt;</code> -带有<b>photo-browser-next</b>类的链接，可以充当下一个按钮
          li
            p <code>&lt;a class="photo-browser-prev"&gt;</code> - 带有<b>photo-browser-prev</b>类的链接，可以充当上一个按钮
        h3 图片元素模版
        p 这是一张幻灯片的模版，你可以通过<code>photoTemplate</code>参数传递；
        pre
          code
            | &lt;div class="photo-browser-slide swiper-slide"&gt;
            |     &lt;span class="photo-browser-zoom-container"&gt;&lt;img src="{{url}}"&gt;&lt;/span&gt;
            | &lt;/div&gt;            
        h3 懒加载模板
        p 单个图片的懒加载模板，你可以通过  <code>photoLazyTemplate</code> 参数来设置。
        pre
          code
            | &lt;div class="photo-browser-slide photo-browser-slide-lazy swiper-slide"&gt;
            |     &lt;div class="preloader"&gt;&lt;/div&gt;
            |     &lt;span class="photo-browser-zoom-container"&gt;&lt;img class="swiper-lazy" src="{{url}}"&gt;&lt;/span&gt;
            | &lt;/div&gt;            
        h3 对象元素模版
        p 这是一个对象元素的模版，你可以通过<code>objectTemplate</code>参数传递：
        pre
          code
            | &lt;div class="photo-browser-slide photo-browser-object-slide swiper-slide"&gt;
            |     {{html}}
            | &lt;/div&gt;
        h3 标题模版
        p 这是一个包含所有标题的模版，你可以通过<code>captionsTemplate</code>参数传递：
        pre
          code
            | &lt;div class="photo-browser-captions photo-browser-captions-dark"&gt;
            |     {{captions}}
            | &lt;/div&gt;
        h3 单个标题模版
        p 这是单个标题的模版，你可以通过<code>captionTemplate</code>参数传递：
        pre
          code
            | &lt;div class="photo-browser-caption" data-caption-index="{{captionIndex}}"&gt;
            |     {{caption}}
            | &lt;/div&gt;
