extends ../jade/_internal-template

block vars
  - var activeLink = 'docs';
  - var title = 'Template7 | Framework7 Documentation';

block content
  .docs-wrap
    .docs-nav
      include ../jade/_docs-menu
    .docs-content
      h1 Template7
      p Template7 是一个移动优先的 JS 模板引擎，它和 <a href="http://handlebarsjs.com/" target="_blank">Handlebars</a> 的语法很像。
      p 它非常轻量（压缩并且gzip之后只有大概1KB大小），并且非常快速（在safari移动版中的速度是Handlebars的3倍），并且它现在已经内置在Framework7中了，你不需要额外引用任何JS文件。
      h2 模板
      p Template7 的模板看上去非常像 Handlerbars 的模板，它就是在普通的HTML中嵌入了handlebars的表达式：
      pre
        code
          | &lt;div class="list-block"&gt;
          |   &lt;ul&gt;
          |     {{#each items}}
          |     &lt;li class="item-content"&gt;
          |       &lt;div class="item-inner"&gt;
          |         &lt;div class="item-title"&gt;{{title}}&lt;/div&gt;
          |       &lt;/div&gt;
          |     &lt;/li&gt;
          |     {{/each}}
          |   &lt;/ul&gt;
          | &lt;/div&gt; 
      h2 表达式语法
      p Template7 支持下面这些表达式语法：
      h3 变量:
      ul
        li 
          p <code>{{title}}</code> - 普通变量。输出当前上下文中的 "title" 变量
        li 
          p <code>{{../title}}</code> - 普通变量。输出父级上下文中的 "title" 变量
        li 
          p <code>{{../../title}}</code> - 普通变量。输出父级的父级上下文中的 "title" 变量
        li
          p <code>{{this}}</code> - 普通变量。输出当前上下文。
        li
          p <code>{{person.name}}</code> - 普通变量。输出当前上下文中的person变量的 "name" 属性。
        li
          p <code>{{../person.name}}</code> - 普通变量。和上面类似，不过是在父级上下文中
        li
          p <code>{{@index}}</code> - 以 <code>@</code> 开头的都是 Template7 添加的附加数据，比如你在遍历数组的时候会有 {{@index}}，在访问全局上下文时会有 {{@global}}。
      h3 块级表达式
      ul
        li
          p <code>{{#each}}</code> - 块级表达式开始
        li
          p <code>{{else}}</code> - 块级表达式相反的开始（如果支持的话）
        li
          p <code>{{/each}}</code> - 块级表达式结束
        li
          p <code>{{#each reverse="true"}}</code> - 块级表达式开始，并且传入了一个 <code>reverse:true</code> 变量

      h4 辅助方法
      p 辅助方法可以是普通表达式或者块级表达式:
      ul
        li
          p <code>{{join myArray delimeter=", "}}</code> - 执行 "join" 辅助方法，传递了两个参数，一个是当前上下文的 "myArray"，另一个是 <code>delimeter=","</code>，这是一个hash参数。

      h2 编译和渲染
      p Temppate7 是一个全局变量
      p 首先，我们需要传递一个字符串模板。比如，我们可以存储在script标签中：
      pre
        code.html
          | &lt;script id="template" type="text/template7"&gt;
          |     &lt;p&gt;Hello, my name is {{firstName}} {{lastName}}&lt;/p&gt;
          | &lt;/script&gt;
      p 现在我们需要用JS来编译它。Template7 会把我们的模板字符串转换成一个JS方法：
      pre
        code
          | var template = $$('#template').html();
          | 
          | // compile it with Template7
          | var compiledTemplate = Template7.compile(template);
          | 
          | // Now we may render our compiled template by passing required context
          | var context = {
          |     firstName: 'John',
          |     lastName: 'Doe'
          | };
          | var html = compiledTemplate(context);
      p 现在， <code>html</code> 变量应该是如下内容：
      pre
        code &lt;p&gt;Hello, my name is John Doe&lt;/p&gt;
      
      h2 内建的辅助方法
      p 辅助方法在Template7中就像一个预定义的函数，可以用来在传递给它的上下文中做一些操作。
      h4 {{#each}}...{{else}}...{{/each}}
      p <code>{{#each}}</code> 是一个块级表达式，可以用来遍历传入的参数，支持遍历数组的条目和对象的属性。
      p The following additional variables are available inside of this helper:
      ul
        li
          p <code>@index</code> - index number of the item. For arrays only
        li
          p <code>@first</code> - equal to <b>true</b> for the first item in array. For arrays only
        li
          p <code>@last</code> - equal to <b>true</b> for the last item in array. For arrays only
        li
          p <code>@key</code> - name of current object property. For objects only
      table.template7-examples
        thead
          tr
            th Template ->
            th Context ->
            th Output
        tbody
          td(colspan="3") 遍历数组
          tr
            td
              pre
                code
                  | &lt;p&gt;Here are the list of people i know:&lt;/p&gt;
                  | &lt;ul&gt;
                  |   {{#each people}}
                  |   &lt;li&gt;{{firstName}} {{lastName}}&lt;/li&gt;
                  |   {{/each}}    
                  | &lt;/ul&gt;          
            td
              pre
                code
                  | {
                  |   people : [
                  |     {
                  |       firstName: 'John',
                  |       lastName: 'Doe'
                  |     },
                  |     {
                  |       firstName: 'Mark',
                  |       lastName: 'Johnson'
                  |     },
                  |   ]
                  | }      
            td
              pre
                code
                  | &lt;p&gt;Here are the list of people i know:&lt;/p&gt;
                  | &lt;ul&gt;
                  |   &lt;li&gt;John Doe&lt;/li&gt;
                  |   &lt;li&gt;Mark Johnson&lt;/li&gt;
                  | &lt;/ul&gt;    
          tr
            td
              pre
                code
                  | &lt;p&gt;Here are the list of people i know:&lt;/p&gt;
                  | &lt;ul&gt;
                  |   {{#each people}}
                  |   &lt;li&gt;{{@index}}. {{this}}&lt;/li&gt;
                  |   {{/each}}    
                  | &lt;/ul&gt;          
            td
              pre
                code
                  | {
                  |   people : ['John Doe', 'Mark Johnson']
                  | }      
            td
              pre
                code
                  | &lt;p&gt;Here are the list of people i know:&lt;/p&gt;
                  | &lt;ul&gt;
                  |   &lt;li&gt;0. John Doe&lt;/li&gt;
                  |   &lt;li&gt;1. Mark Johnson&lt;/li&gt;
                  | &lt;/ul&gt;  
          td(colspan="3") 遍历对象属性
          tr
            td
              pre
                code
                  | &lt;p&gt;Car properties:&lt;/p&gt;
                  | &lt;ul&gt;
                  |   {{#each props}}
                  |   &lt;li&gt;{{@key}}: {{this}}&lt;/li&gt;
                  |   {{/each}}
                  | &lt;/ul&gt;
            td
              pre
                code
                  | {
                  |   props: {
                  |     power: '150 hp',
                  |     speed: '200 km/h',
                  |   }
                  | }
            td
              pre
                code
                  | &lt;p&gt;Car properties:&lt;/p&gt;
                  | &lt;ul&gt;
                  |   &lt;li&gt;power: 150 hp&lt;/li&gt;
                  |   &lt;li&gt;speed: 200 kn/h&lt;/li&gt;
                  | &lt;/ul&gt;
          td(colspan="3") {{else}} 表达式.
          tr
            td
              pre
                code
                  | &lt;p&gt;Car properties:&lt;/p&gt;
                  | &lt;ul&gt;
                  |   {{#each props}}
                  |   &lt;li&gt;{{@key}}: {{this}}&lt;/li&gt;
                  |   {{else}}
                  |   &lt;li&gt;No properties&lt;/li&gt;
                  |   {{/each}}
                  | &lt;/ul&gt;
            td
              pre
                code
                  | {
                  |   props: {
                  |     power: '150 hp',
                  |     speed: '200 km/h',
                  |   }
                  | }
            td
              pre
                code
                  | &lt;p&gt;Car properties:&lt;/p&gt;
                  | &lt;ul&gt;
                  |   &lt;li&gt;power: 150 hp&lt;/li&gt;
                  |   &lt;li&gt;speed: 200 kn/h&lt;/li&gt;
                  | &lt;/ul&gt;
          tr
            td
              pre
                code
                  | &lt;p&gt;Car properties:&lt;/p&gt;
                  | &lt;ul&gt;
                  |   {{#each props}}
                  |   &lt;li&gt;{{@key}}: {{this}}&lt;/li&gt;
                  |   {{else}}
                  |   &lt;li&gt;No properties&lt;/li&gt;
                  |   {{/each}}
                  | &lt;/ul&gt;
            td
              pre
                code
                  | {}
            td
              pre
                code
                  | &lt;p&gt;Car properties:&lt;/p&gt;
                  | &lt;ul&gt;
                  |   &lt;li&gt;No properties&lt;/li&gt;
                  | &lt;/ul&gt;
      h4 {{#if}}...{{else}}...{{/if}}
      p {{#if}} 辅助方法，在传入的上下文不是 "false"(或者 "undefined" 或者 "null" 或者 "" 或者 "0") 的情况下会渲染后面的内容，否则，如果你设置了 {{else}} 表达式，则会渲染它里面的内容：
      table.template7-examples
        thead
          tr
            th Template ->
            th Context ->
            th Output
        tbody
          tr
            td
              pre
                code
                  | &lt;a href="#" {{#if active}}class="active"{{/if}}&gt;{{title}}&lt;/a&gt;
            td
              pre
                code
                  | {
                  |   active: true,
                  |   title: 'Link',
                  | }
            td
              pre
                code
                  | &lt;a href="#" class="active"&gt;Link&lt;/a&gt;
          td(colspan="3") {{else}} 表达式.
          tr
            td
              pre
                code
                  | &lt;p&gt;Hello, my name is {{name}}.&lt;/p&gt;
                  | {{#if hobby}}
                  | &lt;p&gt;I have hobby&lt;/p&gt;
                  | {{else}}
                  | &lt;p&gt;I don't have hobby&lt;/p&gt;
                  | {{/if}}                  
            td
              pre
                code
                  | {
                  |   name: 'John Doe',
                  |   hobby: false
                  | }
            td
              pre
                code
                  | &lt;p&gt;Hello, my name is John Doe.&lt;/p&gt;
                  | &lt;p&gt;I don't have hobby&lt;/p&gt;
      h4 {{#unless}}...{{else}}...{{/unless}}
      p 当传入的上下文是 "false" (或者 "undefined" 或者 "null" 或者 "" 或者 "0") 的时候，{{#unless}} 才会渲染内容，否则他会渲染可选的 {{else}} 表达式的内容
      table.template7-examples
        thead
          tr
            th Template ->
            th Context ->
            th Output
        tbody
          tr
            td
              pre
                code
                  | &lt;a href="#" {{#unless active}}class="active"{{/unless}}&gt;{{title}}&lt;/a&gt;
            td
              pre
                code
                  | {
                  |   active: true,
                  |   title: 'Link',
                  | }
            td
              pre
                code
                  | &lt;a href="#"&gt;Link&lt;/a&gt;
          td(colspan="3") {{else}} expression.
          tr
            td
              pre
                code
                  | &lt;p&gt;Hello, my name is {{name}}.&lt;/p&gt;
                  | {{#unless hobby}}
                  | &lt;p&gt;I have hobby&lt;/p&gt;
                  | {{else}}
                  | &lt;p&gt;I don't have hobby&lt;/p&gt;
                  | {{/unless}}                  
            td
              pre
                code
                  | {
                  |   name: 'John Doe',
                  |   hobby: false
                  | }
            td
              pre
                code
                  | &lt;p&gt;Hello, my name is John Doe.&lt;/p&gt;
                  | &lt;p&gt;I have hobby&lt;/p&gt;
      h4 {{#with}}...{{/with}}
      p {{#with}} 辅助方法 把当前上下文改变为传入的上下文:
      table.template7-examples
        thead
          tr
            th Template ->
            th Context ->
            th Output
        tbody
          tr
            td
              pre
                code
                  | {{#with props}}
                  | &lt;p&gt;Car has {{power}} power and {{speed}} maximum speed&lt;/p&gt;
                  | {{/with}}
            td
              pre
                code
                  | {
                  |   props: {
                  |     power: '150 hp',
                  |     speed: '200 km/h',
                  |   }
                  | }
            td
              pre
                code
                  | &lt;p&gt;Car has 150 hp power and 200 km/h maximum speed&lt;/p&gt;
      h4 {{#variableName}}...{{/variableName}}
      p 你如果你传入一个一个块级表达式，并且辅助方法的名字是一个表达式的上下文，那么如果这个上下文是数组，它会和 {{#each}}一样的作用，如果上下文是一个对象，它会和 {{#with}} 是一样的作用：
      table.template7-examples
        thead
          tr
            th Template ->
            th Context ->
            th Output
        tbody
          tr
            td
              pre
                code
                  | &lt;ul&gt;
                  |   {{#people}}
                  |   &lt;li&gt;{{name}} - {{age}} years old&lt;/li&gt;
                  |   {{/people}}
                  | &lt;/ul&gt;
            td
              pre
                code
                  | {
                  |   people: [
                  |     {
                  |       name: 'John Doe',
                  |       age: 18
                  |     },
                  |     {
                  |       name: 'Mark Johnson',
                  |       age: 21
                  |     }
                  |   ]  
                  | }
            td
              pre
                code
                  | &lt;ul&gt;
                  |   &lt;li&gt;John Doe - 18 years old&lt;/li&gt;
                  |   &lt;li&gt;Mark Johnson - 21 years old&lt;/li&gt;
                  | &lt;/ul&gt;
          tr
            td
              pre
                code
                  | {{#props}}
                  | &lt;p&gt;Car has {{power}} power and {{speed}} maximum speed&lt;/p&gt;
                  | {{/props}}
            td
              pre
                code
                  | {
                  |   props: {
                  |     power: '150 hp',
                  |     speed: '200 km/h',
                  |   }
                  | }
            td
              pre
                code
                  | &lt;p&gt;Car has 150 hp power and 200 km/h maximum speed&lt;/p&gt;
      h4 {{join delimeter=""}}
      p 对数组执行Join方法
      table.template7-examples
        thead
          tr
            th Template ->
            th Context ->
            th Output
        tbody
          tr
            td
              pre
                code
                  | &lt;h3&gt;"{{title}}" TV Show&lt;/h3&gt;
                  | &lt;p&gt;Was released in year {{year}}&lt;/p&gt;
                  | &lt;p&gt;Genres: {{join genres delimeter=", "}}&lt;/p&gt;
            td
              pre
                code
                  | {
                  |   title: 'Friends',
                  |   year: 2001,
                  |   genres: ['comedy', 'drama']
                  | }
            td
              pre
                code
                  | &lt;h3&gt;"Friends" TV Show&lt;/h3&gt;
                  | &lt;p&gt;Was released in year 2001&lt;/p&gt;
                  | &lt;p&gt;Genres: comedy, drama&lt;/p&gt;
      h4 {{escape}}
      p This plain helper returns escaped HTML string. It escapes only the following characters: <code>&lt; &gt; " &amp;</code>
      table.template7-examples
        thead
          tr
            th Template ->
            th Context ->
            th Output
        tbody
          tr
            td
              pre
                code
                  | &lt;h1&gt;{{title}}&lt;/h1&gt;
                  | &lt;p&gt;{{escape body}}&lt;/p&gt;
            td
              pre
                code
                  | {
                  |   title: 'Paragraphs',
                  |   body: 'We need to use &lt;p&gt; tags to add paragraphs in HTML',
                  | }
            td
              pre
                code
                  | &lt;h1&gt;Paragraphs&lt;/h1&gt;
                  | &lt;p&gt;We need to use &amp;lt;p&amp;gt; tags to add paragraphs in HTML&lt;/p&gt;
      h4 {{js "expression"}}
      p This inline helper allows to execute some simple JavaScript directly in template to modify/check context on the fly or for some JS calculations
      table.template7-examples
        thead
          tr
            th Template ->
            th Context ->
            th Output
        tbody
          tr
            td
              pre
                code
                  | &lt;h3&gt;{{title}}&lt;/h3&gt;
                  | &lt;p&gt;Price: ${{js "this.price * 1.2"}} &lt;/p&gt;
                  | &lt;p&gt;{{js "this.inStock ? 'In Stock' : 'Not in stock'"}} &lt;/p&gt;
            td
              pre
                code
                  | {
                  |   title: 'iPhone 6 Plus',
                  |   price: 1000,
                  |   inStock: true
                  | }
            td
              pre
                code
                  | &lt;h3&gt;iPhone 6 Plus&lt;/h3&gt;
                  | &lt;p&gt;Price: $1200&lt;/p&gt;
                  | &lt;p&gt;In stock&lt;/p&gt;
      h4 {{#js_compare "expression"}}...{{/js_compare}}
      p Block helper for easier compares of context variables. It renders content if JavaScript expression is not "false" (or "undefined" or "null" or "" or "0") , otherwise it renders inverse content that optionally could be passed to {{else}} expression inside of helper
      table.template7-examples
        thead
          tr
            th Template ->
            th Context ->
            th Output
        tbody
          tr
            td
              pre
                code.html
                  | &lt;h3&gt;{{title}}&lt;/h3&gt;
                  | &lt;p&gt;Price: ${{price}} &lt;/p&gt;
                  | &lt;p&gt;{{#js_compare "color === 'white' && memory > 16"}}Not in stock{{else}}In stock{{/js_compare}} &lt;/p&gt;
            td
              pre
                code
                  | {
                  |   title: 'iPhone 6 Plus',
                  |   price: 1000,
                  |   color: 'white',
                  |   memory: 32
                  | }
            td
              pre
                code
                  | &lt;h3&gt;iPhone 6 Plus&lt;/h3&gt;
                  | &lt;p&gt;Price: $1000&lt;/p&gt;
                  | &lt;p&gt;Not in stock&lt;/p&gt;
          tr
            td
              pre
                code.html
                  | &lt;p&gt;{{#js_compare "a === b"}}A equals to B{{else}}A not equal to B{{/js_compare}} &lt;/p&gt;
            td
              pre
                code
                  | {
                  |   a: 5,
                  |   b: 34
                  | }
            td
              pre
                code
                  | &lt;p&gt;A not equal to B&lt;/p&gt;
      p.important-note Nore that in <b>js</b> and in <b>js_compare</b> helper you may need to use <code><b>this.</b>variableName</code> instead of just <code>variableName</code>
      h2 Using Custom Helpers
      p Template7 allows to register custom helpers with the following method:
      .method-wrap
        p
          span.method Template7.registerHelper(<span>name</span>, <span>helper</span>) 
        ul.method-parameters
          li
            span.parameter name - 
            | <span class="parameter-type">string</span> - 方法名
          li
            span.parameter helper - 
            | <span class="parameter-type">function</span> - 处理传入上下文的方法体
      p 辅助方法可以接受任意多个参数，参数可以是上下文、字符串或者哈希字典。
      p 我们看看应该如何注册一个辅助方法：
      pre
        code
          | Template7.registerHelper('if', function (condition, options) {
          |   // "this" in function context is equal to the expression execution context
          |   // "condition" argument contains passed context/condition
          |   /*
          |     @options contains object with the wollowing properties and methods:
          |     "hash" - contains passed hash object with parameters
          |     "fn" - method to pass helper block content further to compilier
          |     "inverse" - method to pass helper block inverse ({{else}}) content further to compilier
          |     "data" - contains additional expression data, like @index for arrays or @key for object
          |   */
          | 
          |   // First we need to check is the passed context is function
          |   if (typeof condition === 'function') condition = condition.call(this);
          | 
          |   // If context condition
          |   if (condition) {
          |     // We need to pass block content further to compilier with the same context and the same data:
          |     options.fn(this, options.data);
          |   }
          |   else {
          |     // We need to pass block inverse ({{else}}) content further to compilier with the same context and the same data:
          |     options.inverse(this, options.data);
          |   }
          | }); 
      p Or on example of plain {{join}} helper:
      pre
        code
          | Template7.registerHelper('join', function (arr, options) {
          |   // First we need to check is the passed arr argument is function
          |   if (typeof arr === 'function') arr = arr.call(this);
          | 
          |   /* 
          |     Passed delimeter is in the options.hash object:
          |     console.log(options.hash) -> {delimeter: ', '}
          |   */
          | 
          |   // And return joined array
          |   return arr.join(options.hash.delimeter);
          | });          
      p 或者我们创建一个辅助方法，可以创建 F7的 list-block 链接：
      pre
        code
          | {{link url title target="_blank"}}
      pre
        code
          | Template7.registerHelper('link', function (url, title, options){
          |   var ret = '&lt;li&gt;' +
          |               '&lt;a href="' + url + '" class="item-content item-link" target="' + options.hash.target + '"&gt;' +
          |                 '&lt;div class="item-inner"&gt;' +
          |                   '&lt;div class="item-title"&gt;' + title + '&lt;/div&gt;' +
          |                 '&lt;/div&gt;' +
          |               '&lt;/a&gt;' +
          |             '&lt;/li&gt;';
          |   return ret;
          | });
      table.template7-examples
        thead
          tr
            th Template ->
            th Context ->
            th Output
        tbody
          tr
            td
              pre
                code
                  | &lt;div class="list-block"&gt;
                  |   &lt;ul&gt;
                  |     {{#each links}}
                  |     {{link url title target="_blank"}}
                  |     {{/each}}    
                  |   &lt;/ul&gt;
                  | &lt;/div&gt;
            td
              pre
                code
                  | {
                  |   links: [
                  |     {
                  |       url: 'http://google.com',
                  |       title: 'Google'
                  |     },
                  |     {
                  |       url: 'http://idangero.us',
                  |       title: 'iDangero.us'
                  |     },
                  |   ]
                  | }
            td
              pre
                code
                  | &lt;div class="list-block"&gt;
                  |   &lt;ul&gt;
                  |     &lt;li&gt;
                  |       &lt;a href="http://google.com" target="_blank" class="item-link item-content"&gt;
                  |         &lt;div class="item-inner"&gt;
                  |           &lt;div class="item-title"&gt;Google&lt;/div&gt;
                  |         &lt;/div&gt;
                  |       &lt;/a&gt;
                  |     &lt;/li&gt;
                  |     &lt;li&gt;
                  |       &lt;a href="http://idangero.us" target="_blank" class="item-link item-content"&gt;
                  |         &lt;div class="item-inner"&gt;
                  |           &lt;div class="item-title"&gt;iDangero.us&lt;/div&gt;
                  |         &lt;/div&gt;
                  |       &lt;/a&gt;
                  |     &lt;/li&gt;
                  |   &lt;/ul&gt;
                  | &lt;/div&gt;
      br
      .important-note
        p 注意，所有这个自定义的辅助方法都应该在你编译模板之前注册
      h2 删除自定义的辅助方法
      p Template7 可以通过下面这个方法来删除自定义的辅助方法：
      .method-wrap
        p
          span.method Template7.unregisterHelper(<span>name</span>) 
        ul.method-parameters
          li
            span.parameter name - 
            | <span class="parameter-type">string</span> - helper name
      h2 全局上下文
      p Template7 可以支持设置一个全局上下文，这个全局上下文可以在任何地方访问。
      p 可以通过 <code>Template7.global</code> 属性来设置：
      pre
        code
          | Template7.global = {
          |     os: 'iOS',
          |     browser: 'Chrome',
          |     username: 'johndoe',
          |     email: 'john@doe.com'
          | };
      p 在模板中可以通过 <code>{{@global}}</code> 变量来访问。
      pre
        code.html
          | &lt;p&gt;Hello, {{@global.username}}. Your email is {{@global.email}}&lt;/p&gt;
      h2 Access To Root Context
      p Sometimes we may need to access to initially passed root context in our templates. For this case we need to use <code>{{@root}}</code> variable. This is especially helpful when we are deep in context:
      pre
        code.js
          | {
          |     persons: [
          |         {
          |             name: 'John',
          |             hobby: ['Cars', 'Food']
          |         },
          |         {
          |             name: 'Kyle',
          |             hobby: ['Travel', 'Puzzles']
          |         },
          |  
          |     ],
          |     showHobby: true
          | }    
      pre
        code
          | {{#each persons}}
          |     &lt;h2&gt;{{name}}&lt;/h2&gt;
          |     &lt;h3&gt;Hobby:&lt;/h3&gt;
          |     {{#if @root.showHobby}}
          |         &lt;ul&gt;
          |             {{#each hobby}}
          |                 &lt;li&gt;{{this}}&lt;/li&gt;
          |             {{/each}}
          |         &lt;/ul&gt;
          |     {{/if}}
          | {{/each}}              
      h2 Partials
      p Template7 allows to reuse template using through partials. Partials are normal usual Template7 templates that may be called by other templates.
      p We can register and unregister partials using the following methods:
      .method-wrap
        p
          span.method Template7.registerPartial(<span>name</span>, <span>template</span>) 
          | - register partial
        ul.method-parameters
          li
            span.parameter name - 
            | <span class="parameter-type">string</span> - partial name
          li
            span.parameter helper - 
            | <span class="parameter-type">string</span> - partial template
      .method-wrap
        p
          span.method Template7.unregisterPartial(<span>name</span>) 
          | - unregister partial
        ul.method-parameters
          li
            span.parameter name - 
            | <span class="parameter-type">string</span> - partial name
      p Then we can use our partials using special helper <code>{{&gt; "partialName"}}</code>
      p <b>Template:</b>
      pre
        code.hbs
          | &lt;ul class="users"&gt;
          |     {{#each users}}
          |     {{&gt; "user"}}
          |     {{/each}}
          | &lt;/ul&gt;
          | &lt;ul class="admins"&gt;
          |     {{#each admins}}
          |     {{&gt; "user"}}
          |     {{/each}}
          | &lt;/ul&gt;
      p <b>Register partial</b>:
      pre
        code.js
          | Template7.registerPartial('user', '&lt;li&gt;&lt;h2&gt;{{firstName}} {{lastName}}&lt;/h2&gt;&lt;p&gt;{{bio}}&lt;/p&gt;&lt;/li&gt;')
      p <b>Apply to the template this context</b>:
      pre
        code
          | {
          |     users: [
          |         {
          |             firstName: 'John',
          |             lastName: 'Doe',
          |             bio: 'Lorem ipsum dolor'
          |         },
          |         {
          |             firstName: 'Jane',
          |             lastName: 'Doe',
          |             bio: 'Donec sodales euismod augue'
          |         }
          |     ],
          |     admins: [
          |         {
          |             firstName: 'Mike',
          |             lastName: 'Doe',
          |             bio: 'Lorem ipsum dolor'
          |         },
          |         {
          |             firstName: 'Kate',
          |             lastName: 'Doe',
          |             bio: 'Donec sodales euismod augue'
          |         }
          |     ]
          | }
      p <b>And we will get the following output:</b>
      pre
        code         
          | &lt;ul class="users"&gt;
          |     &lt;li&gt;
          |         &lt;h2&gt;John Doe&lt;/h2&gt;
          |         &lt;p&gt;Lorem ipsum dolor&lt;/p&gt;
          |     &lt;/li&gt;
          |     &lt;li&gt;
          |         &lt;h2&gt;Jane Doe&lt;/h2&gt;
          |         &lt;p&gt;Donec sodales euismod augue&lt;/p&gt;
          |     &lt;/li&gt;
          | &lt;/ul&gt;
          | &lt;ul class="admins"&gt;
          |     &lt;li&gt;
          |         &lt;h2&gt;Mike Doe&lt;/h2&gt;
          |         &lt;p&gt;Lorem ipsum dolor&lt;/p&gt;
          |     &lt;/li&gt;
          |     &lt;li&gt;
          |         &lt;h2&gt;Kate Doe&lt;/h2&gt;
          |         &lt;p&gt;Donec sodales euismod augue&lt;/p&gt;
          |     &lt;/li&gt;
          | &lt;/ul&gt;    
      h2 Recursive Partials 
      p We can even use partials to make recursive templates, like nested comments:
      pre
        code
          | // Simple template with just a partial
          | var template = '{{&gt; "comments"}}'
          | 
          | // Register partial
          | Template7.registerPartial(
          |     'comments', 
          |     '&lt;ul&gt;' + 
          |         '{{#each comments}}' +
          |             '&lt;li&gt;' +
          |             '&lt;h2&gt;{{author}}&lt;/h2&gt;' +
          |             '&lt;p&gt;{{text}}&lt;/p&gt;' +
          |             '{{#if comments}}{{&gt; "comments"}}{{/if}}' +
          |             '&lt;/li&gt;' +
          |         '{{/each}}' +
          |     '&lt;/ul&gt;'
          | );
          | 
          | // Compile template 
          | var compiledTemplate = Template7.compile(template);
          |  
          | // Render template 
          | var output = compiledTemplate({
          |     comments: [
          |         {
          |             author: 'John Doe',
          |             text: 'Lorem ipsum dolor',
          |             comments: [
          |                 {
          |                     author: 'Mike Doe',
          |                     text: 'Aliquam erat volutpat'
          |                 },
          |                 {
          |                     author: 'Kate Doe',
          |                     text: 'Donec eget fringilla turpis'
          |                 }
          |             ]
          |         },
          |         {
          |             author: 'Jane Doe',
          |             text: 'Donec sodales euismod augue'
          |         }
          |     ]
          | })
      p And the output will be:
      pre
        code
          | &lt;ul class="comments"&gt;
          |     &lt;li&gt;
          |         &lt;h2&gt;John Doe&lt;/h2&gt;
          |         &lt;p&gt;Lorem ipsum dolor&lt;/p&gt;
          |         &lt;ul class="comments"&gt;
          |             &lt;li&gt;
          |                 &lt;h2&gt;Mike Doe&lt;/h2&gt;
          |                 &lt;p&gt;Aliquam erat volutpat&lt;/p&gt;
          |             &lt;/li&gt;
          |             &lt;li&gt;
          |                 &lt;h2&gt;Kate Doe&lt;/h2&gt;
          |                 &lt;p&gt;Donec eget fringilla turpis&lt;/p&gt;
          |             &lt;/li&gt;
          |         &lt;/ul&gt;
          |     &lt;/li&gt;
          |     &lt;li&gt;
          |         &lt;h2&gt;Jane Doe&lt;/h2&gt;
          |         &lt;p&gt;Donec sodales euismod augue&lt;/p&gt;
          |     &lt;/li&gt;
          | &lt;/ul&gt;
      h2 Performance Tips
      p Template7 is fast and you can make it works even faster in your apps. The slowest part (but still very fast in T7) in all this compilation/rendering process is the compilation from string to pure JS function when you do <code>Template7.compile()</code>. So don't compile the same templates multiple times, one time will be enough:
      pre
        code
          | // Initialize app
          | var myApp = new Framework7();
          | 
          | // Compile templates once on app load/init
          | var searchTemplate = $('script#search-template').html();
          | var compiledSearchTemplate = Template7.compile(searchTemplate);
          | 
          | var listTemplate = $('script#list-template').html();
          | var compiledListTemplate = Template7.compile(listTemplate);
          | 
          | // That is all, now and further just execute compiled templates with required context
          | myApp.onPageInit('search', function (page) {
          |     // Just execute compiled search template with required content:
          |     var html = compiledSearchTemplate({/*...some data...*/});
          | 
          |     // Do something with html...
          | });        
      h2 在F7之外使用 Template7
      p Template7 可以作为一个独立仓库使用。你需要在这里下载 
        a(href="https://github.com/nolimits4web/Template7", target="_blank") Template7 GitHub repo
      p 或者通过 bower 安装:
      pre
        code bower install template7
